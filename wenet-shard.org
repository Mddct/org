*** [TODO]shard 格式
1 [header]

2 tar header：
  
  text header: filename = ${key} + ".txt", data=txt, info_size = len(data)
  
  wav header:  filename=${wav_filename}, data=wav_bytes, info_size = len(data )
  
    #+begin_src go
    type Record struct{
        Key string
        WavPath stirng
        Text string

  }
    func tarshard(writer io.Writer, records []*Record) {
        tw := tar.NewWriter(writer)
        for i := range records {
                record := records[i]
                name := ""
                if record.Key  ==  ""{
                        name  = strings.TrimSuffix(filepath.Base(record.WavPath), filepath.Ext(record.WavPath))
                }else{
                        name = record.Key
                }
                // txt heeader and body
                hdr := &tar.Header{
                        Name: name + ".txt",
                        Mode: 0777,
                        Size: int64(len(record.Text)),
                }
                if _, err := tw.WriteHeader(hdr); err != nil {
                        log.Fatal(err)
                }
                if _, err := tw.Write([]byte(record.Text)) {
                        log.Fatal(err)
                }

                // wav header and body
                wavbody,  err := ioutil.ReadAll(record.WavPath)
                if err != nil{
                        log.Fatal(err)
                }
                wavhdr := &tar.Header{
                        Name: name + ".wav",
                        Mode: 0777,
                        Size: int64(len(wavbody)),
                }
                if _, err := tw.WriteHeader(wavhdr); err != nil {
                        log.Fatal(err)
                }
                if _, err := tw.Write(wavbody) {
                        log.Fatal(err)
                }

        }
        tw.Close()
}
    #+end_src
  
*** [TODO] untar 格式 dataset=processor(dataset,), 类tf。data格式

*** [TODO] shard distributed , 数据不均衡
